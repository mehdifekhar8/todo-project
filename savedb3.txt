import {
  newSmart,
  useRouter,
  useUIComponents,
  useTranslate,
  useData,
  use,
} from "@bluelibs/x-ui";
import { useEffect, useState, useMemo } from "react";
import React, { Component } from 'react';

import { TodoAntTableSmart } from "./TodoTableSmart";
import { PlusOutlined, FilterOutlined } from "@ant-design/icons";
import * as Ant from "antd";
import { Routes } from "@bundles/UIAppBundle";
import { features } from "../../config/features";
import { TodoListFilters } from "./TodoListFilters";
import { render } from "react-dom";
import { TodoCollection } from "@bundles/UIAppBundle/collections";
let state = {
  tasks: [
    { name: "Hit the gym", category: "todo", bgcolor: "#FFB695", _id: "" },
    { name: "Get breakfast", category: "todo", bgcolor: "#96D1CD", _id: "" },
  ]
}


export default class TodoList2 extends Component {

  onDragOver = (ev) => {
    ev.preventDefault();
  }
  onDrop = (ev, cat) => {
    let id = ev.dataTransfer.getData("id");
    let tasks = state.tasks.filter((task) => {
      if (task.name == id) {
        task.category = cat;
      //   let updater ; 
      //   (cat == "done") ? updater = true : updater = false ; 
      //   this.todocollection.updateOne(task._id, { $set: {done:updater} })
      //       .then(({ _id }) => {
            
      //       })
      //       .catch((err) => {
            
      //       });
       }
      return task;
    });
console.log("state")
    this.setState({
      ...state,
      tasks
    });
    
  }

  onDragStart = (ev, id) => {
    console.log('dragstart:', id);
    ev.dataTransfer.setData("id", id);
  }

  render() {


    var tasks = {
      todo: [],
      done: []
    }
console.log("props")
console.log(this.props)

    state.tasks.forEach((t) => {
      tasks[t.category].push(
        <div key={t.name}
          onDragStart={(e) => this.onDragStart(e, t.name)}
          draggable
          className="draggable"
          style={{ backgroundColor: t.bgcolor }}
        >
          {t.name}
        </div>
      );
    });

    return (
      <div className="container-drag"   >
        <Ant.Row>
          <Ant.Col span={12}>
            <div className="todo"
              onDragOver={(e) => this.onDragOver(e)}
              onDrop={(e) => { this.onDrop(e, "todo") }}>
              <Ant.List
                header={<div>Header</div>}
                footer={<div>Footer</div>}
                bordered
                dataSource={tasks.todo}
                renderItem={item => (
                  <Ant.List.Item>
                    <Ant.Typography.Text mark></Ant.Typography.Text> {item}
                  </Ant.List.Item>
                )}
              />
            </div></Ant.Col>
          <Ant.Col span={12}>   <div className="droppable"
            onDrop={(e) => this.onDrop(e, "done")}
            onDragOver={(ev) => this.onDragOver(ev)}>
            <Ant.List
              header={<div>Header</div>}
              footer={<div>Footer</div>}
              bordered
              dataSource={tasks.done}
              renderItem={item => (
                <Ant.List.Item>
                  <Ant.Typography.Text mark></Ant.Typography.Text> {item}
                </Ant.List.Item>
              )}
            />
          </div></Ant.Col>
        </Ant.Row>
        <Ant.PageHeader >DRAG & DROP DEMO</Ant.PageHeader>
      </div>
    );
  }




}
export function TodoList() {
  const UIComponents = useUIComponents();
  const router = useRouter();
  const t = useTranslate();
  const [api, Provider] = newSmart(TodoAntTableSmart);
  const [filtersOpened, setFiltersOpened] = useState(false);
  const { data: task, error, isLoading } = useData(TodoCollection, {
    filters: {

    }
  }, {
    _id: 1,
    done: 1,
    titel: 1,
  })

  useEffect(() => {
    console.log(`You have clicked the first button  times`);
  }, [state]);
  const onFiltersUpdate = useMemo(() => {
    return (filters) => {
      api.setFlexibleFilters(filters);
    };
  }, []);
  state.tasks = []
console.log(state)
  if (task) {
    task.forEach((key) => {
      if (key.done == true) {
        state.tasks.push({ name: key.titel, category: "done", bgcolor: "#FFB695", _id: key._id })
      } else {
        state.tasks.push({ name: key.titel, category: "todo", bgcolor: "#FFB695", _id: key._id })

      }


    })
  }

  return (
    <UIComponents.AdminLayout>
      <Ant.PageHeader
        title={t("management.todo.list.header")}
        extra={[
          features.create ? (
            <Ant.Button
              key="1"
              onClick={() => router.go(Routes.TODO_CREATE)}
              icon={<PlusOutlined />}
            >
              {t("management.todo.list.create_btn")}
            </Ant.Button>
          ) : null,
          <Ant.Button
            key="2"
            onClick={() => setFiltersOpened(!filtersOpened)}
            icon={<FilterOutlined />}
          >
            {t("generics.list_filters")}
          </Ant.Button>,
        ]}
      />

      {api.state.isError && (
        <Ant.Alert type="error" message={t("generics.error_message")} />
      )}

      <Ant.Layout.Content>
        <Provider>
          <div className="page-todo-list">
            {filtersOpened && <TodoListFilters onUpdate={onFiltersUpdate} />}
            <Ant.Input.Search
              name="Search"
              placeholder={t("generics.list_search")}
              className="search"
              onKeyUp={(e) => {
                const value = (e.target as HTMLInputElement).value;
                api.setFilters({
                  // Customise your search filters!
                  title: new RegExp(`${value}`, "i"),
                });
              }}
            />
            <Ant.Table {...api.getTableProps()} />
          </div>
          <TodoList2>{{state}}</TodoList2>

        </Provider>
      </Ant.Layout.Content>
    </UIComponents.AdminLayout>
  );
}

